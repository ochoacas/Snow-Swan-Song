/* MAP */

// Leaflet map object
var map = L.map('map', {
    zoomControl: false,
    fullscreenControl: true,
    preferCanvas: true  // This allows thousands of points to be rendered quickly
});
// Set bounding box
var corner1 = L.latLng(55.253461463214126, -139.0196808469),  // upper left point (max)
    corner2 = L.latLng(35.329795743702064, -111.463262),  // lower right point (max)
    bounds = L.latLngBounds(corner1, corner2);
// Set limits on zoom levels and bounds
map.options.minZoom = 6;
map.options.maxZoom = 15;
map.options.maxBounds = bounds;
// Set initial bounds
map.fitBounds([
    [49.3632412491, -126.0326203],  // upper left point (initial)
    [40.0219407235, -118.7486847531]  // lower right point (initial)
]);
// Add zoom control
L.control.zoom({position: "bottomleft"}).addTo(map);
// Add scale bar
L.control.scale({position: 'bottomleft'}).addTo(map);

function home() { // Reset Map View
    map.fitBounds([
        [49.3632412491, -126.0326203],
        [40.0219407235, -118.7486847531]
    ])
};

document.cookie = 'cross-site-cookie=http://mapbox.com/; SameSite=None; Secure';

/* BASE MAP LAYERS */

// Custom Mapbox PNW shellfish base map
var mapbox_shellfish = L.tileLayer('https://api.mapbox.com/styles/v1/katzbr/cjshza9xf1db51fqgpriounjs/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1Ijoia2F0emJyIiwiYSI6ImNqOHhmMnBucDIwZm4ycW8ya2d5cHF0cmsifQ.8rcjz0DyWs_ncWfOZ0VwKA', {
    attribution: 'Created by <a href="https://github.com/briangkatz/">Brian G. Katz</a> | <a href="assets/license.txt">Mapbox</a>',
    detectRetina: true
}).addTo(map);
// Mapbox satellite base map
var mapbox_satellite = L.tileLayer('https://api.mapbox.com/styles/v1/katzbr/cjhxps6ae204n2rpneg2yutrn/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1Ijoia2F0emJyIiwiYSI6ImNqOHhmMnBucDIwZm4ycW8ya2d5cHF0cmsifQ.8rcjz0DyWs_ncWfOZ0VwKA', {
    attribution: 'Created by <a href="https://github.com/briangkatz/">Brian G. Katz</a> | <a href="assets/license2.txt">Mapbox</a>',
    detectRetina: true
});

/* DYNAMIC SVG GRAPHS */

// Initialize SVG width and height based on viewing window size
function setWidth(window) {  // width of all charts
    var width = $(window).width() * 0.325;  // large
    if ($(window).width() <= 1920 && $(window).width() > 1280) { width = $(window).width() * 0.32; }  // medium-large
    else if ($(window).width() <= 1280 && $(window).width() > 1024) { width = $(window).width() * 0.315; }  // medium
    else if ($(window).width() <= 1024) { width = $(window).width() * 0.9; }  // small
    return width;
};
function setHeight(window) {  // height of date chart and species chart
    var height = $(window).height() * 0.195;  // large
    if ($(window).height() <= 1280 && $(window).height() > 857) { height = $(window).height() * 0.225; }  // medium
    else if ($(window).height() <= 857) { height = $(window).height() * 0.225; }  // small
    else if ($(window).height() >= 2000) { height = $(window).height() * 0.225; }  // x-large
    return height;
};
function setBarHeight(window) {  // height of intensity & frequency bar charts
    var height = $(window).height() * 0.195;  // large
    var intFreqHeight = height;
    if ($(window).height() <= 1280 && $(window).height() > 857) { height = $(window).height() * 0.27; intFreqHeight = height * 0.5; }  // medium
    else if ($(window).height() <= 857) { height = $(window).height() * 0.33; intFreqHeight = height * 0.31; }  // small
    else if ($(window).height() >= 2000) { height = $(window).height() * 0.5; intFreqHeight = height * 0.45; }  // x-large
    return intFreqHeight;
};
dc.config.defaultColors(d3.schemePaired);
// Species responses by life stage
d3.csv("assets/data/species.csv").then(d => chart(d))

function chart(data) {

	var keys = data.columns.slice(1);

	var parseTime = d3.timeParse("%Y"),
		formatDate = d3.timeFormat("%Y"),
		bisectDate = d3.bisector(d => d.omega_arag).left,
		formatValue = d3.format(",.1f"),
		formatFloat = d3.format(".2f");

	data.forEach(function(d) {
		d.date = parseTime(d.date);
		d.omega_arag = formatFloat(d.omega_arag);
		return d;
	});

	var width = setWidth(window);
	var height = setHeight(window);

	var svg = d3.select("#species-response-chart")
	    .attr("width", width)
	    .attr("height", height),
		margin = {
		    top: 15,
		    right: 10,
		    bottom: 15,
		    left: 40
		},
		width = +svg.attr("width"),
		height = +svg.attr("height") - margin.top - margin.bottom;

	var x = d3.scaleLinear()
		.rangeRound([margin.left, width - margin.right])
		.domain(d3.extent(data, d => formatFloat(d.omega_arag)))
		.range([width - margin.right, margin.left]);

	var y = d3.scaleLinear()
		.rangeRound([height - margin.bottom, margin.top]);

	var z = d3.scaleOrdinal(d3.schemePaired);

	var line = d3.line()
		.curve(d3.curveBasisOpen)
		.x(d => x(formatFloat(d.omega_arag)))
		.y(d => y(formatValue(d.response)));

	svg.append("g")
		.attr("class","x-axis")
		.attr("transform", "translate(0, " + (height - margin.bottom) + ")")
		.call(d3.axisBottom(x).tickFormat(d3.format(".1f")));
	svg.append("text")
      .attr("transform", "translate(" + (width / 2) + ", " + (height + margin.top + 10) + ")")
      .style("text-anchor", "middle")
      .text("Aragonite saturation state");
//      .append("tspan")
//      .attr("dy", 4)
//      .text("ar");

	svg.append("g")
		.attr("class", "y-axis")
		.attr("transform", "translate(" + margin.left + ", 0)");
	svg.append("text")
		  .attr("transform", "rotate(-90)")
		  .attr("y", -2)
		  .attr("x", 0 - (height / 2))
		  .attr("dy", "1em")
		  .style("text-anchor", "middle")
		  .text("Growth (% change from pre-industrial)");
    // Create line at calculated mean aragonite within spatiotemporal filter
	var mean_arag_hotspots = svg.append("g")
		.attr("class", "focus")
		.style("display", "block");
	mean_arag_hotspots.append("line").attr("class", "lineHover")
		.style("stroke", "#ff8000")
		.attr("stroke-width", 3)
		.style("shape-rendering", "crispEdges")
		.style("opacity", 0.5)
		.attr("y1", -height)
		.attr("y2", 0);

    var mean_arag_t1 = svg.append("g")
        .attr("class", "focusMean")
        .style("display", "block");
    mean_arag_t1.append("line").attr("class", "lineHover")
        .style("stroke", "#999")
        .attr("stroke-width", 3)
        .style("shape-rendering", "crispEdges")
        .style("opacity", 0.5)
        .attr("y1", -height)
        .attr("y2",0);

    var mean_arag_t2 = svg.append("g")
        .attr("class", "focusMean")
        .style("display", "block");
    mean_arag_t2.append("line").attr("class", "lineHover")
        .style("stroke", "#999")
        .attr("stroke-width", 3)
        .style("shape-rendering", "crispEdges")
        .style("opacity", 0.5)
        .attr("y1", -height)
        .attr("y2",0);

    // Create line where mouse hovers over species response chart overlay
	var focus = svg.append("g")
		.attr("class", "focus")
		.style("display", "none");
	focus.append("line").attr("class", "lineHover")
		.style("stroke", "#000000")
		.attr("stroke-width", 3)
		.style("shape-rendering", "crispEdges")
		.style("opacity", 0.5)
		.attr("y1", -height)
		.attr("y2", 0);
	focus.append("text").attr("class", "lineHoverArag")
		.attr("text-anchor", "middle")
		.attr("font-size", 12);
    // Create overlay on species response chart
	var overlay = svg.append("rect")
		.attr("class", "overlay")
		.attr("x", margin.left)
		.attr("width", width - margin.right - margin.left)
		.attr("height", height);

	update(d3.select('#selectbox').property('value'), 0);

	function update(input, speed) {

		var copy = keys.filter(f => f.includes(input));

		var species_all = copy.map(function(id) {
			return {
				id: id,
				values: data.map(d => { return { omega_arag: d.omega_arag, response: +d[id] } })
			};
		});

		y.domain([
			d3.min(species_all, d => d3.min(d.values, c => c.response)),
			d3.max(species_all, d => d3.max(d.values, c => c.response))
		]).nice();

		svg.selectAll(".y-axis").transition()
			.duration(speed)
			.call(d3.axisLeft(y).tickSize(-width + margin.right + margin.left));

		var species = svg.selectAll(".species_all")
			.data(species_all);

		species.exit().remove();

        // Lines for species response curves
		species.enter().insert("g", ".focus").append("path")
			.attr("class", "line species_all")
			.style("stroke", d => z(d.id))
            .style("stroke-width", 3)
			.merge(species)
		    .transition().duration(speed)
			.attr("d", d => line(d.values));

		tooltip(copy);
	};

	function tooltip(copy) {

		var labels = focus.selectAll(".lineHoverText")
			.data(copy);
		labels.enter().append("text")
			.attr("class", "lineHoverText")
			.style("fill", d => z(d))
			.attr("text-anchor", "middle")
			.attr("font-size", "1vw")
			.attr("dy", (_, i) => 1 + i * 2 + "em")
			.merge(labels);

		var circles = focus.selectAll(".hoverCircle")
			.data(copy);
		circles.enter().append("circle")
			.attr("class", "hoverCircle")
			.style("fill", d => z(d))
			.attr("r", 3)
			.merge(circles);

        // Have an overlay line appear and disappear over the species response curves on mouseover/mouseout
		svg.selectAll(".overlay")
			.on("mouseover", function() { focus.style("display", null); })
			.on("mouseout", function() { focus.style("display", "none"); })
			.on("mousemove", mousemove);

        // Function to display data values (y) respective to mouse hover location (x)
		function mousemove() {

			var x0 = x.invert(d3.mouse(this)[0]),
				i = bisectDate(data, x0, 1),
				d0 = data[i - 1],
				d1 = data[i],
				d = x0 - d0.omega_arag > d1.omega_arag - x0 ? d1 : d0;

			focus.select(".lineHover")
				.attr("transform", "translate(" + x(d.omega_arag) + "," + height + ")");
			focus.select(".lineHoverArag")
				.attr("transform",
					"translate(" + x(d.omega_arag) + "," + (height + margin.bottom) + ")")
				.text(d.omega_arag);
            // Circles move along data values at the mouse hover event location, i.e. y(d[e])
			focus.selectAll(".hoverCircle")
				.attr("cy", e => y(d[e]))
				.attr("cx", x(d.omega_arag));
			// Display data headings and values on overlay hover line
			focus.selectAll(".lineHoverText")
				.attr("transform", "translate(" + (x(d.omega_arag)) + ", " + height / 2.5 + ")")
				.text(e => e.split("_")[1].split('-').join(' ') + ": " + formatValue(d[e]) + "%");
            // Set spacing of hover text from hover line
			x(d.omega_arag) > (width - width / 4)
				? focus.selectAll("text.lineHoverText")
					.attr("text-anchor", "end")
					.attr("dx", -7.5)
				: focus.selectAll("text.lineHoverText")
					.attr("text-anchor", "start")
					.attr("dx", 7.5);
		};
	};

	var selectbox = d3.select("#selectbox")
		.on("change", function() {
			update(this.value, 500);
		});

    // Multi-coordinated view geovisualization
    var arag_events = d3.json('assets/data/omega_arag_hotspots.geojson').then(function(data) {

        var filter = crossfilter(data.features);

        var all = filter.groupAll();

        var everything = filter.dimension(function(d) {
            return d;
        });

        var geomDimension = filter.dimension(function(d) {
            return d.geometry;
        });

//        // Intensity dimension: mean aragonite saturation state of OA hot spots
//        // All values
//        var intDimension = filter.dimension(function(d) {
//            var int = d.properties.i.toFixed(2);  // aragonite saturation state
//            return int.toString();
//        });
//        // Intensity dimension: mean aragonite saturation state of OA hot spots
//        // 9-class natural breaks
//        var intDimension = filter.dimension(function(d) {
//            var int = d.properties.i.toFixed(2);  // aragonite saturation state
//            return (int <= 1.06) ? '≤ 1.06' :
//                (int <= 1.12) ? '≤ 1.12' :
//                    (int <= 1.16) ? '≤ 1.16' :
//                        (int <= 1.20) ? '≤ 1.20' :
//                            (int <= 1.24) ? '≤ 1.24' :
//                                (int <= 1.28) ? '≤ 1.28' :
//                                    (int <= 1.32) ? '≤ 1.32' :
//                                        (int <= 1.36) ? '≤ 1.36' :
//                                            '≤ 1.40';
//        });
        // Intensity dimension: mean aragonite saturation state of OA hot spots
        // 5-class natural breaks
        var intDimension = filter.dimension(function(d) {
            var int = d.properties.i.toFixed(2);  // aragonite saturation state
            return (int <= 1.12) ? '≤ 1.12' :
                (int <= 1.20) ? '≤ 1.20' :
                    (int <= 1.27) ? '≤ 1.27' :
                        (int <= 1.33) ? '≤ 1.33' :
                            '≤ 1.40';
        });

//        // Frequency of passing the aragonite saturation state threshold (months/yr)
//        // Quarterly breaks
//        var freqDimension = filter.dimension(function(d) {
//            var freq = d.properties.f;
//            return freq <= 3 ? '0 - 3' :
//                freq <= 4 && freq < 7 ? '4 - 6' :
//                    freq <= 7 && freq < 10 ? '7 - 9' :
//                            '10 - 12';
//        });
//        // Frequency of passing the aragonite saturation state threshold (months/yr)
//        // Monthly breaks
//        var freqDimension = filter.dimension(function(d) {
//            var freq = d.properties.f;
//            return freq <= 1 ? '1' :
//                freq <= 2 ? '2' :
//                    freq <= 3 ? '3' :
//                        freq <= 4 ? '4' :
//                            freq <= 5 ? '5' :
//                                freq <= 6 ? '6' :
//                                    freq <= 7 ? '7' :
//                                        freq <= 8 ? '8' :
//                                                        '9+';
//        });
//        // Frequency of passing the aragonite saturation state threshold (months/yr)
//        // 7-class natural breaks
//        var freqDimension = filter.dimension(function(d) {
//            var freq = d.properties.f;
//            return freq <= 1 ? '≤ 1' :
//                freq <= 2 ? '≤ 2' :
//                    freq <= 3 ? '≤ 3' :
//                        freq <= 4 ? '≤ 4' :
//                            freq <= 5 ? '≤ 5' :
//                                freq <= 7 ? '≤ 7' :
//                                    '≤ 10';
//        });
        // Frequency of passing the aragonite saturation state threshold (months/yr)
        // 5-class natural breaks
        var freqDimension = filter.dimension(function(d) {
            var freq = d.properties.f;
            return freq <= 1 ? '≤ 1' :
                freq <= 2 ? '≤ 2' :
                    freq <= 4 ? '≤ 4' :
                        freq <= 6 ? '≤ 6' :
                            '≤ 10';
        });

        // Time when aragonite saturation state threshold is first reached (omega <= 1.4)
        var dateDimension = filter.dimension(function(d) {
            return d3.timeDay(new Date(d.properties.t));
        });

        var intDimensionGroup = intDimension.group();

        var freqDimensionGroup = freqDimension.group();

        var dateDimensionGroup = dateDimension.group();

        // Set function for color ramp
        var aragColors = chroma.scale('Oranges').mode('lab').colors(5);

        function setColorArag(arag) {
            var id = 0;
            if (arag <= 1.12) { id = 4; }
            else if (arag <= 1.20) { id = 3; }
            else if (arag <= 1.27) { id = 2; }
            else if (arag <= 1.33) { id = 1; }
            else  { id = 0; }  // (arag <= 1.40)
            return aragColors[id];
        };

        function calcPropRadius(attributeValue) {
		    var scaleFactor = 32;
		    var area = attributeValue * scaleFactor;
		    return Math.sqrt(area / Math.PI) * 2;
        };

        var circleRadius = 1;

        function circleStyle(feature) {
            return {
                    radius: calcPropRadius(feature.properties.f) * circleRadius,
                    fillColor: setColorArag(feature.properties.i),
                    fillOpacity: 0.3,
                    weight: 0,
                    opacity: 0,
                    stroke: false
                };
        };

        var geoJsonLayer = L.geoJson({
            type: 'FeatureCollection',
            features: geomDimension.top(Infinity)
        }, {
            pointToLayer: function(feature, latlng) {
                return L.circleMarker(latlng, circleStyle(feature));
            },
            onEachFeature: function(feature, layer) {
                layer.bindTooltip("&Omega; Aragonite: " + feature.properties.i.toString() +
                                    '<br>' + 'Projected: ' + feature.properties.t.toString(), {className: 'aragTooltip'});
            }
            }).addTo(map);

        // Intensity chart for OA hot spots mean aragonite saturation state
        var intChart = dc.barChart('#int-chart');
        // Define the order of bar chart x-axis break points when strings are used for axis labels
//        var intOrder = [  // all values
//          {range: "1.40", order: 0},
//          {range: "1.39", order: 1},
//          {range: "1.38", order: 2},
//          {range: "1.37", order: 3},
//          {range: "1.36", order: 4},
//          {range: "1.35", order: 5},
//          {range: "1.34", order: 6},
//          {range: "1.33", order: 7},
//          {range: "1.32", order: 8},
//          {range: "1.31", order: 9},
//          {range: "1.30", order: 10},
//          {range: "1.29", order: 11},
//          {range: "1.28", order: 12},
//          {range: "1.27", order: 13},
//          {range: "1.26", order: 14},
//          {range: "1.25", order: 15},
//          {range: "1.24", order: 16},
//          {range: "1.23", order: 17},
//          {range: "1.22", order: 18},
//          {range: "1.21", order: 19},
//          {range: "1.20", order: 20},
//          {range: "1.19", order: 21},
//          {range: "1.18", order: 22},
//          {range: "1.17", order: 23},
//          {range: "1.16", order: 24},
//          {range: "1.15", order: 25},
//          {range: "1.14", order: 26},
//          {range: "1.13", order: 27},
//          {range: "1.12", order: 28},
//          {range: "1.11", order: 29},
//          {range: "1.10", order: 30},
//          {range: "1.09", order: 31},
//          {range: "1.08", order: 32},
//          {range: "1.07", order: 33},
//          {range: "1.06", order: 34},
//          {range: "1.05", order: 35},
//          {range: "1.04", order: 36},
//          {range: "1.03", order: 37},
//          {range: "1.02", order: 38},
//          {range: "1.01", order: 39},
//          {range: "1.00", order: 40},
//          {range: "0.99", order: 41},
//          {range: "0.98", order: 42},
//          {range: "0.97", order: 43},
//          {range: "0.96", order: 44},
//          {range: "0.95", order: 45}
//        ];
//        var intOrder = [  // 9-class natural breaks
//          {range: "≤ 1.40", order: 0},
//          {range: "≤ 1.36", order: 1},
//          {range: "≤ 1.32", order: 2},
//          {range: "≤ 1.28", order: 3},
//          {range: "≤ 1.24", order: 4},
//          {range: "≤ 1.20", order: 5},
//          {range: "≤ 1.16", order: 6},
//          {range: "≤ 1.12", order: 7},
//          {range: "≤ 1.06", order: 8}
//        ];
        var intOrder = [  // 5-class natural breaks
          {range: "≤ 1.40", order: 0},
          {range: "≤ 1.33", order: 1},
          {range: "≤ 1.27", order: 2},
          {range: "≤ 1.20", order: 3},
          {range: "≤ 1.12", order: 4}
        ];
        var sortByOrderInt = intOrder.sort(function (a, b) { return a.order < b.order; });
        var int_ranges = sortByOrderInt.map(function (d) { return d.range; });
        intChart
            .width(setWidth(window))
            .height(setBarHeight(window))
            .margins({
                top: 10,
                right: 10,
                bottom: 40,
                left: 40
            })
            .dimension(intDimension)
            .group(intDimensionGroup)
            .elasticY(true)
            .x(d3.scaleBand().domain(int_ranges))
            .xUnits(dc.units.ordinal)
            .yAxis()
            .ticks(3);

        // Frequency chart for OA hot spots months per year
        var freqChart = dc.barChart('#freq-chart');
        // Define the order of bar chart x-axis break points when strings are used for axis labels
//        var freqOrder = [  // 4-class quarterly breaks
//          {range: "1 - 3", order: 0},
//          {range: "4 - 6", order: 1},
//          {range: "7 - 9", order: 2},
//          {range: "10 - 12", order: 3}
//        ];
//        var freqOrder = [  // 9-class monthly breaks
//          {range: "1", order: 0},
//          {range: "2", order: 1},
//          {range: "3", order: 2},
//          {range: "4", order: 3},
//          {range: "5", order: 4},
//          {range: "6", order: 5},
//          {range: "7", order: 6},
//          {range: "8", order: 7},
//          {range: "9+", order: 8},
//        ];
//        var freqOrder = [  // 7-class natural breaks
//          {range: "≤ 1", order: 0},
//          {range: "≤ 2", order: 1},
//          {range: "≤ 3", order: 2},
//          {range: "≤ 4", order: 3},
//          {range: "≤ 5", order: 4},
//          {range: "≤ 7", order: 5},
//          {range: "≤ 10", order: 6}
//        ];
        var freqOrder = [  // 5-class natural breaks
          {range: "≤ 1", order: 0},
          {range: "≤ 2", order: 1},
          {range: "≤ 4", order: 2},
          {range: "≤ 6", order: 3},
          {range: "≤ 10", order: 4}
        ];
        var sortByOrderFreq = freqOrder.sort(function (a, b) { return a.order < b.order; });
        var freq_ranges = sortByOrderFreq.map(function (d) { return d.range; });
        freqChart
            .width(setWidth(window))
            .height(setBarHeight(window))
            .margins({
                top: 10,
                right: 10,
                bottom: 40,
                left: 40
            })
            .dimension(freqDimension)
            .group(freqDimensionGroup)
            .elasticY(true)
            .x(d3.scaleBand().domain(freq_ranges))
            .xUnits(dc.units.ordinal)
            .yAxis()
            .ticks(3);

        // Date chart for OA hot spots count per year
        var dateChart = dc.lineChart('#date-chart');
            dateChart
            .renderArea(true)
            .height(setHeight(window))
            .width(setWidth(window))
            .transitionDuration(1000)
            .margins({
                top: 10,
                right: 10,
                bottom: 40,
                left: 40
            })
            .dimension(dateDimension)
            .group(dateDimensionGroup)
            .elasticY(true)
            .x(d3.scaleTime().domain([new Date(1994, 1), new Date(2050, 12)]))
            .xUnits(d3.timeYears)
            .yAxis()
            .tickFormat(d3.format("d"));

        dc.renderAll();

        // Update dynamic charts by data present within map bounds
        function updateMapFilter() {
            geomDimension.filter(function(d) {
                return map.getBounds().contains(L.geoJSON(d).getBounds());
            });
            dc.redrawAll();
        };
        // Update map features
        function updateMap() {
            geoJsonLayer.clearLayers();
            geoJsonLayer.addData({
                type: 'FeatureCollection',
                features: everything.top(Infinity)
            });
        };

        // Calculate average of all filtered points' values for 30-year mean aragonite saturation state at end of series
        function calcMeanArag() {
            var total_hotspots = all.value();
            var arag_values = [];
            for (var i in geoJsonLayer._layers) {
                arag_values.push(geoJsonLayer._layers[i].feature.properties.i);
            }
            var arrAvg = arag_values.reduce((a,b) => a + b, 0) / arag_values.length;
            mean_arag_hotspots.select(".lineHover")
                .attr("transform", "translate(" + x(arrAvg) + "," + height + ")");

            mean_arag_hotspots.select(".lineHoverArag")
                .attr("transform",
                    "translate(" + x(arrAvg) + "," + (height + margin.bottom) + ")");
            return arrAvg;  // calculated mean
        };

        function adjustCircleRadius() {
            var currentZoom = map.getZoom();
            if (currentZoom == 10) { circleRadius = 1.25; }
            else if (currentZoom == 11) { circleRadius = 2; }
            else if (currentZoom > 11 && currentZoom < 13) { circleRadius = 4; }
            else if (currentZoom >= 13 && currentZoom < 14) { circleRadius = 8; }
            else if (currentZoom >= 14 && currentZoom < 15) { circleRadius = 16; }
            else if (currentZoom >= 15 && currentZoom < 23) { circleRadius = 32; }
            else { circleRadius = 1; }
            return circleRadius;
        };

        // Update filtered data and calculate mean intensity & proportional circle size whenever map is panned or zoomed
        map.on('zoomend moveend', function() {
            updateMapFilter();
            updateMap();
            calcMeanArag();
            circleRadius = adjustCircleRadius();
            geoJsonLayer.setStyle(circleStyle);
        });

        intChart.on('filtered', function(chart, filter) {
            updateMap();
            calcMeanArag();
        });

        freqChart.on('filtered', function(chart, filter) {
            updateMap();
            calcMeanArag();
        });

        dateChart.on('filtered', function(chart, filter) {
            updateMap();
            calcMeanArag();
        });

        /* LABELS */
        var hideLabel = function(label){ label.labelObject.style.opacity = 0;};
        var showLabel = function(label){ label.labelObject.style.opacity = 1;};
        var labelEngine = new labelgun.default(hideLabel, showLabel);
        var labels = [];
        function labelClass(feature) {
            if (feature.properties.NAME != 'California') {class_name = 'feature-label';}
            else {class_name = 'feature-label ca';}
            return class_name;
       }

        /* COLORS */

        // Color by ordinal data
        // Set grades for color break points by data attributes
        var exposure_ROC_grades = [-0.19, -0.21, -0.22, -0.23, -0.26];
        // Set grades for color break points by data attributes
        var exposure_baseline_grades = [2.22, 1.97, 1.82, 1.58, 1.51];
        // Set grades for color break points by data attributes
        var sensitivity_grades = [0, 10, 26, 230, 384];
//        // Set grades for color break points by data attributes
//        var sensitivity_grades = [0.00000, 0.00015, 0.00037, 0.00329, 0.00549];
        // Set color ramp
        var colors = chroma.scale('Oranges').mode('lab').colors(5);
        // Assign color based on data attributes
        function getColorExposureROC(d1, d2) {
            var d = (d2 - d1).toFixed(2);  // change in 30-yr mean aragonite
            for (var i = 0; i < exposure_ROC_grades.length - 1; i++) {
                if (d <= exposure_ROC_grades[i] && d > exposure_ROC_grades[i + 1]) return colors[i];
            }
            if (d <= exposure_ROC_grades[exposure_ROC_grades.length - 1]) return colors[exposure_ROC_grades.length - 1];
        };
        // Assign color based on data attributes
        function getColorExposureBaseline(d1, d2) {
            var d = ((d1 + d2) / 2).toFixed(2);  // 30-yr mean aragonite
            for (var i = 0; i < exposure_baseline_grades.length - 1; i++) {
                if (d <= exposure_baseline_grades[i] && d > exposure_baseline_grades[i + 1]) return colors[i];
            }
            if (d <= exposure_baseline_grades[exposure_baseline_grades.length - 1]) return colors[exposure_baseline_grades.length - 1];
        };
        // Assign color based on data attributes
        function getColorSensitivity(d1, d2, d3, d4, d5) {  // total shellfish shippers per 90000 people in watershed
            var d = Math.round((d1 + d2 + d3 + d4) / d5 * 70000);
            for (var i = 0; i < sensitivity_grades.length - 1; i++) {
                if (d > sensitivity_grades[i] && d <= sensitivity_grades[i + 1]) return colors[i + 1];
                else if (d == sensitivity_grades[0]) return colors[0];
            }
            if (d >= sensitivity_grades[sensitivity_grades.length - 1]) return colors[sensitivity_grades.length - 1];
        };
//        // Assign color based on data attributes
//        function getColorSensitivity(d1, d2, d3, d4, d5) {  // total shellfish shippers per 90000 people in watershed
//            var d = Math.round((d1 + d2 + d3 + d4) / d5).toFixed(5);
//            for (var i = 0; i < sensitivity_grades.length; i++) {
//                if (d < sensitivity_grades[i] && d <= sensitivity_grades[i + 1]) return colors[i];
//                else if (d == sensitivity_grades[0]) return colors[0];
//            }
//            if (d >= sensitivity_grades[sensitivity_grades.length - 1]) return colors[sensitivity_grades.length - 1];
//        };
        // Style features by setting fill color property based on data attributes
        function exposureROCstyle(feature) {
            return {
                fillColor: getColorExposureROC(feature.properties.arag_t1, feature.properties.arag_t2),
                fillOpacity: 0.6,
                weight: 1,
                color: '#000000',  // stroke color
                opacity: 1,  // stroke opacity
                dashArray: '2, 2',
                dashOffset: '2'
            };
        };
        // Style features by setting fill color property based on data attributes
        function exposureBaselineStyle(feature) {
            return {
                fillColor: getColorExposureBaseline(feature.properties.arag_t1, feature.properties.arag_t2),
                fillOpacity: 0.6,
                weight: 1,
                color: '#000000',  // stroke color
                opacity: 1,  // stroke opacity
                dashArray: '2, 2',
                dashOffset: '2'
            };
        };
        // Style features by setting fill color property based on data attributes
        function sensitivityStyle(feature) {
            return {
                fillColor: getColorSensitivity(feature.properties.shippersWA, feature.properties.shippersOR, feature.properties.shippersCA, feature.properties.shprsICSSL, feature.properties.pop),
                fillOpacity: 0.6,
                weight: 1,
                color: '#000000',  // stroke color
                opacity: 1,  // stroke opacity
                dashArray: '2, 2',
                dashOffset: '2'
            };
        };
        // Style features by setting fill color property based on data attributes
        function stateStyle(feature) {
            return {
                fillColor: '#ffffff',
                fillOpacity: 0,
                weight: 3,
                color: '#ffffff',  // stroke color
                opacity: 1,  // stroke opacity
                zindex: -1000
            };
        };

        /* INTERACTIVITY */

        // Set style for highlighting features
        function highlightFeatureWatersheds_exposure_ROC(e) {
            var layer = e.target;
            layer.setStyle({
                weight: 3,
                opacity: 0.8,
                color: '#ffffff',
                fillOpacity: 0.95,
                dashArray: '1',
                dashOffset: '0'
            });
            layer.bringToFront();
            if ($(".legend-hotspots").is(":visible")) {
                geoJsonLayer.bringToFront();
            }
            mean_arag_t1.selectAll(".lineHover")
                .attr("transform", "translate(" + x(layer.feature.properties.arag_t1) + "," + height + ")");
//            mean_arag_t1.selectAll(".lineHoverArag")
//                .attr("transform",
//                    "translate(" + x(layer.feature.properties.arag_t1) + "," + (height + margin.bottom) + ")");
            mean_arag_t2.selectAll(".lineHover")
                .attr("transform", "translate(" + x(layer.feature.properties.arag_t2) + "," + height + ")");
//            mean_arag_t2.selectAll(".lineHoverArag")
//                .attr("transform",
//                    "translate(" + x(layer.feature.properties.arag_t2) + "," + (height + margin.bottom) + ")");
            // Select the update class, and update the content with the input value.
//            $(".update").html('<h6>Location: ' + layer.feature.properties.NAME + '</h6>');
//            $(".info").show();
        };
        // Set style for highlighting features
        function highlightFeatureWatersheds_exposure_baseline(e) {
            var layer = e.target;
            layer.setStyle({
                weight: 3,
                opacity: 0.8,
                color: '#ffffff',
                fillOpacity: 0.95,
                dashArray: '1',
                dashOffset: '0'
            });
            layer.bringToFront();
            if ($(".legend-hotspots").is(":visible")) {
                geoJsonLayer.bringToFront();
            }
            mean_arag_t1.selectAll(".lineHover")
                .attr("transform", "translate(" + x((layer.feature.properties.arag_t1 + layer.feature.properties.arag_t2) / 2) + "," + height + ")");
//            mean_arag_t1.selectAll(".lineHoverArag")
//                .attr("transform",
//                    "translate(" + x((layer.feature.properties.arag_t1 + layer.feature.properties.arag_t2) / 2) + "," + (height + margin.bottom) + ")");
            mean_arag_t2.selectAll(".lineHover")
                .attr("transform", "translate(" + x((layer.feature.properties.arag_t1 + layer.feature.properties.arag_t2) / 2) + "," + height + ")");
//            mean_arag_t2.selectAll(".lineHoverArag")
//                .attr("transform",
//                    "translate(" + x((layer.feature.properties.arag_t1 + layer.feature.properties.arag_t2) / 2) + "," + (height + margin.bottom) + ")");

//            $(".update").html('<h6>Location: ' + layer.feature.properties.NAME + '</h6>');
//            $(".info").show();
        };
        // Set style for highlighting features
        function highlightFeatureWatersheds_sensitivity(e) {
            var layer = e.target;
            layer.setStyle({
                weight: 3,
                opacity: 0.8,
                color: '#ffffff',
                fillOpacity: 0.95,
                dashArray: '1',
                dashOffset: '0'
            });
            layer.bringToFront();
            if ($(".legend-hotspots").is(":visible")) {
                geoJsonLayer.bringToFront();
            }
            mean_arag_t1.selectAll(".lineHover")
                .attr("transform", "translate(" + x(layer.feature.properties.arag_t1) + "," + height + ")");
//            mean_arag_t1.selectAll(".lineHoverArag")
//                .attr("transform",
//                    "translate(" + x(layer.feature.properties.arag_t1) + "," + (height + margin.bottom) + ")");
            mean_arag_t2.selectAll(".lineHover")
                .attr("transform", "translate(" + x(layer.feature.properties.arag_t2) + "," + height + ")");
//            mean_arag_t2.selectAll(".lineHoverArag")
//                .attr("transform",
//                    "translate(" + x(layer.feature.properties.arag_t2) + "," + (height + margin.bottom) + ")");
//            $(".update").html('<h6>Location: ' + layer.feature.properties.NAME + '</h6>');
//            $(".info").show();
        };
        // Set "Zoom to Layer" property
        function zoomToFeatureWatersheds_exposure_ROC(e) {
            map.fitBounds(e.target.getBounds());
        };
        // Set "Zoom to Layer" property
        function zoomToFeatureWatersheds_exposure_baseline(e) {
            map.fitBounds(e.target.getBounds());
        };
        // Set "Zoom to Layer" property
        function zoomToFeatureWatersheds_sensitivity(e) {
            map.fitBounds(e.target.getBounds());
        };
//        // Set "Zoom to Layer" property
//        function zoomToFeatureStates(e) {
//            map.fitBounds(e.target.getBounds());
//        };
        // Set reset function to remove highlighted style and info window
        function resetHighlightWatersheds_exposure_ROC(e) {
            watersheds_exposure_ROC.resetStyle(e.target);
//            $(".info").hide();
        };
        // Set reset function to remove highlighted style and info window
        function resetHighlightWatersheds_exposure_baseline(e) {
            watersheds_exposure_baseline.resetStyle(e.target);
//            $(".info").hide();
        };
        // Set reset function to remove highlighted style and info window
        function resetHighlightWatersheds_sensitivity(e) {
            watersheds_sensitivity.resetStyle(e.target);
//            $(".info").hide();
        };
        // Assign the interactive functions defined above to mouse events
        function onEachFeatureWatersheds_exposure_ROC(feature, layer) {
            layer.on({
                mouseover: highlightFeatureWatersheds_exposure_ROC,
                click: zoomToFeatureWatersheds_exposure_ROC,
                mouseout: resetHighlightWatersheds_exposure_ROC
            });
            // Add tooltip information
            layer.bindTooltip('<h4>' + layer.feature.properties.NAME + '</h4>' + '<h4>&Delta;<sub>&Omega;<sub>ar</sub></sub>: ' + (layer.feature.properties.arag_t2 - layer.feature.properties.arag_t1).toFixed(2) + '</h4>', {sticky: true, className: "feature-tooltip"});
        };
        // Assign the interactive functions defined above to mouse events
        function onEachFeatureWatersheds_exposure_baseline(feature, layer) {
            layer.on({
                mouseover: highlightFeatureWatersheds_exposure_baseline,
                click: zoomToFeatureWatersheds_exposure_baseline,
                mouseout: resetHighlightWatersheds_exposure_baseline
            });
            // Add tooltip information
            layer.bindTooltip('<h4>' + layer.feature.properties.NAME + '</h4>' + '<h4>Mean &Omega;<sub>ar</sub>: ' + ((layer.feature.properties.arag_t1 + layer.feature.properties.arag_t2) / 2).toFixed(2) + '</h4>', {sticky: true, className: "feature-tooltip"});
        };
        // Assign the interactive functions defined above to mouse events
        function onEachFeatureWatersheds_sensitivity(feature, layer) {
            layer.on({
                mouseover: highlightFeatureWatersheds_sensitivity,
                click: zoomToFeatureWatersheds_sensitivity,
                mouseout: resetHighlightWatersheds_sensitivity
            });
            // Add tooltip information
            layer.bindTooltip('<h4>' + layer.feature.properties.NAME + '</h4>' + '<h4>Shippers per 70k people: ' + Math.round((layer.feature.properties.shippersWA + layer.feature.properties.shippersOR + layer.feature.properties.shippersCA + layer.feature.properties.shprsICSSL) / layer.feature.properties.pop * 70000) + '<sup>*</sup></h4>', {sticky: true, className: "feature-tooltip"});
        };
//        // Assign the interactive functions defined above to mouse events
//        function onEachFeatureStates(feature, layer) {
//            layer.on({
//                click: zoomToFeatureStates
//            });
////            layer.bindTooltip('<h4>' + layer.feature.properties.NAME + '</h4>', {sticky: true, className: "feature-tooltip"});
//        };

        /* DATA LAYERS */

        // Watersheds by rate of change in exposure to OA (delta 30-year mean aragonite)
        var watersheds_exposure_ROC = null;
        watersheds_exposure_ROC = L.geoJson.ajax("assets/data/watersheds_pnw.geojson", {
            style: exposureROCstyle,
            onEachFeature: onEachFeatureWatersheds_exposure_ROC
        });
        // Watersheds by baseline exposure to OA (30-year mean aragonite)
        var watersheds_exposure_baseline = null;
        watersheds_exposure_baseline = L.geoJson.ajax("assets/data/watersheds_pnw.geojson", {
            style: exposureBaselineStyle,
            onEachFeature: onEachFeatureWatersheds_exposure_baseline
        });
        // Watersheds by sensitivity to OA (licensed shellfish shippers from DOH, ODA, CDPH, and ICSSL databases)
        var watersheds_sensitivity = null;
        watersheds_sensitivity = L.geoJson.ajax("assets/data/watersheds_pnw.geojson", {
            style: sensitivityStyle,
            onEachFeature: onEachFeatureWatersheds_sensitivity
        });
        // State boundaries for PNW states (WA, OR, CA)
        var states_pnw = null;
        states_pnw = L.geoJson.ajax("assets/data/states_pnw.geojson", {
            style: stateStyle
        });
        // State centroids for PNW states (WA, OR, CA)
        var states_centroids = null;
        states_centroids = L.geoJson.ajax("assets/data/states_centroids.geojson", {
            pointToLayer: function (feature, latlng) {
                return L.marker(latlng, {icon: L.divIcon({className: 'feature-label'})})
                .bindTooltip(feature.properties.NAME, {permanent: true, direction: 'center'});
            },
            onEachFeature: function (feature, label) {
                label.bindTooltip(feature.properties.NAME, {
                    className: 'feature-label',
                    permanent: true,
                    direction: 'center'
                });
                labels.push(label);
            }
        });

        /* LEGEND */

        // Legend for circle markers
        function getRadius(r) {
            return  r > 6 ? 14 :
                    r > 4 ? 11 :
                    r > 2 ? 9 :
                    r > 1 ? 7 :
                    5;
        }

        function getColor(i) {
            var id = 0;
            if (i <= 1.12) { id = 4; }
            else if (i <= 1.20) { id = 3; }
            else if (i <= 1.27) { id = 2; }
            else if (i <= 1.33) { id = 1; }
            else  { id = 0; }  // (i <= 1.40)
            return aragColors[id];
        }

        var exposureROClegend = L.control({position: 'bottomright'});
        // Set legend colors and labels
        exposureROClegend.onAdd = function () {
            var div = L.DomUtil.create('div', 'legend legend-colors');
            div.innerHTML += '<h5>Rate of change in 30-year mean aragonite saturation state by watershed, 1995-2025 vs. 2020-2050 (&Delta;<sub>&Omega;<sub>ar</sub></sub>)</h5>';
            div.innerHTML += '<p class="disclaimer">Worsening ocean acidification is projected as a long-term decline in aragonite saturation state</p>';
            div.innerHTML += '<div class="infoWatershed"><div class="updateWatershed"></div></div>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[4] + '; opacity: 0.5;"></i><p>≤ ' + exposure_ROC_grades[4] + '</p>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[3] + '; opacity: 0.5;"></i><p>≤ ' + exposure_ROC_grades[3] + '</p>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[2] + '; opacity: 0.5;"></i><p>≤ ' + exposure_ROC_grades[2] + '</p>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[1] + '; opacity: 0.5;"></i><p>≤ ' + exposure_ROC_grades[1] + '</p>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[0] + '; opacity: 0.5;"></i><p>≤ ' + exposure_ROC_grades[0] + '</p>';
            return div;
        };
        // Create legend
        var exposureBaselineLegend = L.control({position: 'bottomright'});
        // Set legend colors and labels
        exposureBaselineLegend.onAdd = function () {
            var div = L.DomUtil.create('div', 'legend legend-colors');
            div.innerHTML += '<h5>30-year mean aragonite saturation state by watershed, 1995-2050 (&Omega;<sub>ar</sub>)</h5>';
            div.innerHTML += '<p class="disclaimer">Ocean acidification is most extreme where aragonite saturation state is low.</p>';
            div.innerHTML += '<div class="infoWatershed"><div class="updateWatershed"></div></div>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[4] + '; opacity: 0.5;"></i><p>≤ ' + exposure_baseline_grades[4] + '</p>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[3] + '; opacity: 0.5;"></i><p>≤ ' + exposure_baseline_grades[3] + '</p>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[2] + '; opacity: 0.5;"></i><p>≤ ' + exposure_baseline_grades[2] + '</p>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[1] + '; opacity: 0.5;"></i><p>≤ ' + exposure_baseline_grades[1] + '</p>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[0] + '; opacity: 0.5;"></i><p>≤ ' + exposure_baseline_grades[0] + '</p>';
            return div;
        };
        // Create legend
        var sensitivityLegend = L.control({position: 'bottomright'});
        // Set legend colors and labels
        sensitivityLegend.onAdd = function () {
            var div = L.DomUtil.create('div', 'legend legend-colors');
            div.innerHTML += '<h5>Licensed shellfish shippers by watershed (normalized by population)</h5>';
            div.innerHTML += '<p class="disclaimer">People who rely on shellfish for their livelihoods or culture are most susceptible to feeling adverse consequences from ocean acidification.</p>';
            div.innerHTML += '<div class="infoWatershed"><div class="updateWatershed"></div></div>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[4] + '; opacity: 0.5;"></i><p>≤ ' + sensitivity_grades[4] + '<sup>*</sup></p>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[3] + '; opacity: 0.5;"></i><p>≤ ' + sensitivity_grades[3] + '<sup>*</sup></p>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[2] + '; opacity: 0.5;"></i><p>≤ ' + sensitivity_grades[2] + '<sup>*</sup></p>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[1] + '; opacity: 0.5;"></i><p>≤ ' + sensitivity_grades[1] + '<sup>*</sup></p>';
            div.innerHTML += '<i class="legend-icon" style="background: ' + colors[0] + '; opacity: 0.5;"></i><p>≤ ' + sensitivity_grades[0] + '<sup>*</sup></p>';
            div.innerHTML += '<p style="font-size:1vw;"><sup>*</sup>per 70,000 people</p>';
            return div;
        };

        // Create legend
        var tribeLegend = L.control({position: 'bottomleft'});
        // Set legend colors and labels
        tribeLegend.onAdd = function () {
            var div = L.DomUtil.create('div', 'legend legend-colors legend-tribe');
            div.innerHTML += '<h5 class="text-center">Tribes of the Pacific Northwest</h5>';
            div.innerHTML += '<p class="disclaimer">Shellfish are valued culturally by tribes as traditional food sources (like salmon) that are harvested for subsistence and ceremonies.</p>';
            div.innerHTML += '<p class="disclaimer">Shellfish such as native Olympia oysters have been harvested by tribal communities for thousands of years.</p>';
            div.innerHTML += '<p class="disclaimer">Ocean acidification may reduce harvest yields over time, and this may create problems for tribes such as cultural losses and food insecurity.</p>';
            div.innerHTML += '<div class="embedded-photo text-center" id="photos"><h6 class="text-center" style="color:#ffffff;">Click or hover over a tribe</h6></div>';
            return div;
        };

        // Create legend
//        var hotspotLegend = L.control({position: 'topleft'});
//        // Set legend colors and labels
//        hotspotLegend.onAdd = function () {
//            var div = L.DomUtil.create('div', 'legend-colors legend-hotspots');
////            div.innerHTML += '<h5>Circles indicate projected hotspots of acidified water stressful to shellfish. Click and drag a range on the time series to filter the data. Click on the bar charts to filter the data by intensity and frequency.</h5>';
//            div.innerHTML += '<h5>Circles indicate projected hotspots of acidified water stressful to shellfish.</h5>';
//            div.innerHTML += '<p>Click and drag a range on the time series to filter the data. Then slide the selected range to visualize change over time.</p>';
//            div.innerHTML += '<p>For example, select 1995-2025 then slide the range to 2020-2050.</p>';
//            div.innerHTML += '<p>Click on the bar charts to filter the data by intensity and frequency.</p>';
//            div.innerHTML += '<p>Pan and zoom the map to update charts by location.</p>';
//            div.innerHTML += '<p>OA Model: <a href="https://www.biogeosciences.net/10/193/2013/bg-10-193-2013.html" target="_blank" style="color:#ffffff;text-decoration:none;">Hauri et al., 2013</a></p>';
//            return div;
//        };
//        hotspotLegend.addTo(map);

                // Create legend
        var hotspotLegend = L.control({position: 'topleft'});
        hotspotLegend.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'info legend-hotspots');
                        div.innerHTML += '<p><b>OA hotspot intensity (mean &Omega;ar)</b></p>',
            grades = [1.4, 1.33, 1.27, 1.20, 1.12],
            labels = [],
            categories = ['≤ 1.40', '≤ 1.33', '≤ 1.27', '≤ 1.20', '≤ 1.12'];
            for (var i = 0; i < grades.length; i++) {
                var grade = grades[i];  //*0.5;
                labels.push(
                    '<i class="circlepadding" style="background: ' + getColor(grade) + ';"></i><i class="circlepadding" style="width: 10px;"></i> ' + categories[i]);
            }
            div.innerHTML += labels.join('<br>');
            div.innerHTML += '<hr>'
            div.innerHTML += '<p><b>OA hotspot frequency (months/year &Omega;ar ≤ 1.4)</b></p>',
            grades = [1, 2, 4, 6, 10],
            labels = [],
            categories = ['≤ 1', '≤ 2', '≤ 4', '≤ 6', '≤ 10'];
            for (var i = 0; i < grades.length; i++) {
                var grade = grades[i];  //*0.5;
                labels.push(
                    '<i class="circlepadding" style="width: ' + Math.max(8, (7 - 2.2 * getRadius(grade))) + 'px;"></i><i style="background: #e6550d; width: ' + getRadius(grade) * 2 + 'px; height: ' + getRadius(grade) * 2 + 'px; border-radius: 50%; margin-top: ' + Math.max(0, (9 - getRadius(grade))) + 'px;"></i><i class="circlepadding" style="width: ' + Math.max(2, (25 - 2 * getRadius(grade))) + 'px;"></i> ' + categories[i]);
            }
            div.innerHTML += labels.join('<br>');
            div.innerHTML += '<br class="footnote2"><br class="footnote2"><small class="footnote2">Data: <a href="https://www.biogeosciences.net/10/193/2013/bg-10-193-2013.html" target="_blank">Hauri et al., 2013</a></small>';

            return div;
        };
        hotspotLegend.addTo(map);

        // Photos
        function showPhoto (evt) {
            $('#photos').show();
            var photo = evt.layer.photo;
            $("div.embedded-photo").empty().append("<img src='" + photo.url +"' class='img-responsive img-thumbnail text-center photo-thumbnail' /><h6 class='text-center' style='color:#ffffff;'> " +  photo.caption +" </h6>");
        }

        // Layer control
        var watershed_layers = {
            "Exposure (rate of change)": L.layerGroup([watersheds_exposure_ROC]),
            "Exposure (baseline)": L.layerGroup([watersheds_exposure_baseline]),
            "Sensitivity (socioeconomic)": L.layerGroup([watersheds_sensitivity]),
            "Clear watershed layers": L.layerGroup([])
        };
        var other_layers = {
            "Projected OA Hotspots": L.layerGroup([geoJsonLayer]).addTo(map),
            "Tribes": L.layerGroup([L.photo.cluster().on('mouseover', showPhoto).add(photos)]),
            "States": L.layerGroup([states_pnw]),
            "Satellite base map": mapbox_satellite
        };
        L.control.layers(watershed_layers, other_layers, {
            position: 'topright',
            collapsed: true
        }).addTo(map);

        // Toggle legend with layer control
        map.on('baselayerchange', function (eventLayer) {  // add legend
            if (eventLayer.name === 'Exposure (rate of change)') {
                map.removeControl(sensitivityLegend);
                map.removeControl(exposureBaselineLegend);
                exposureROClegend.addTo(map);
                $(".focusMean").show();
            } else if (eventLayer.name === 'Exposure (baseline)') {
                map.removeControl(sensitivityLegend);
                map.removeControl(exposureROClegend);
                exposureBaselineLegend.addTo(map);
                $(".focusMean").show();
            } else if (eventLayer.name === 'Sensitivity (socioeconomic)') {
                map.removeControl(exposureROClegend);
                map.removeControl(exposureBaselineLegend);
                sensitivityLegend.addTo(map);
                $(".focusMean").show();
            } else {
                $(".focusMean").hide();
                map.removeControl(sensitivityLegend);
                map.removeControl(exposureROClegend);
                map.removeControl(exposureBaselineLegend);
            }
        });
        map.on('overlayadd', function (eventLayer) {  // add legend
            if (eventLayer.name === 'Tribes') {
                tribeLegend.addTo(map);
            } else if (eventLayer.name === 'Projected OA Hotspots') {
                hotspotLegend.addTo(map);
            } else if (eventLayer.name === 'States') {
                geoJsonLayer.bringToFront();
            }
        });
        map.on('overlayremove', function(eventLayer) {  // remove legend
            if (eventLayer.name === 'Tribes') {
                map.removeControl(tribeLegend);
            } else if (eventLayer.name === 'Projected OA Hotspots') {
                map.removeControl(hotspotLegend);
            }
        });

        $(document).ready(function() {
//            $(".info").hide();
            states_centroids.addTo(map);
            updateMapFilter();
            updateMap();
            calcMeanArag();
            geoJsonLayer.bringToFront();
        });

        $("#sidenavToggler").click(function() {
            $(this).toggleClass("sidenavToggler-right-border");
            $("div .dc-chart").toggleClass("dc-hide");
            $(".dc").toggleClass("dc-hide");
        });

        $(".navbar-toggler-icon").click(function() {
            $(".leaflet-control-layers").toggleClass("dc-hide");
            $(".explain").toggleClass("dc-hide");
        });

        $('.dc-chart svg').ready(function() {
            setTimeout(function() {
                $('.dc').css("display", "block");
            }, 50);
        });

    });


};
